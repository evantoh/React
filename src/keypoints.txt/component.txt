A component is a small, reusable chunk of code that is responsible for one job. 
That job is often to render some HTML.

***code**
import React from 'react';//This is imported object that contains methods that you need in order to use React.The object is called the React library
import ReactDOM from 'react-dom';// methods imported from 'react-dom' are meant for interacting with the DOM

class MyComponentClass extends React.Component { //creating a component x that extends React.Component library,components name MUST start with (UpperCamelCase).
  render() {
    return <h1>Hello world</h1>;
  }
};

ReactDOM.render(
  <MyComponentClass />,//creating the component instance
  document.getElementById('app')
);

Here's another fact about components: every component must come from a *component class*.
  (Component class variable names must begin with capital letters!) NOTE
  A component class is like a factory that creates components.

  A render method must contain a return statement. Usually, this return statement returns a JSX expression and some logic which must be added before rendering
   should occur inside method render().(common mistake you should avoid)
  JSX elements can be either HTML-like, or component instances. JSX uses capitalization to distinguish between the two! 
  that is the React-specific reason why component class names must begin with capital letters. 
  In a JSX element, that capitalized first letter says, "I will be a component instance and not an HTML tag.

  ***key Notes***
  1.a multi-line JSX expression should always be wrapped in parentheses! 
import React from 'react';
import ReactDOM from 'react-dom';

const redPanda = {
  src: 'https://upload.wikimedia.org/wikipedia/commons/b/b2/Endangered_Red_Panda.jpg',
  alt: 'Red Panda',
  width:  '200px'
};

class RedPanda extends React.Component {
  render() {
    return (
      <div>
        <h1>Cute Red Panda</h1>
        <img 
          src={redPanda.src}//JavaScript injections use curly braces since they are JavaScript properties
          alt={redPanda.alt}
          width={redPanda.width} />//remember to use self-closing tags
      </div>
    );
  }
}

ReactDOM.render(
  <RedPanda />,
  document.getElementById('app')
);

  **conditional statements**
Notice that the if statement is located inside of the render function, but before the return statement.
import React from 'react';
import ReactDOM from 'react-dom';

class TodaysPlan extends React.Component {
  render() {
    let task;
    if (!apocalypse) {
      task = 'learn React.js'
    } else {
      task = 'run around'
    }

    return <h1>Today I am going to {task}!</h1>;
  }
}

ReactDOM.render(
	<TodaysPlan />,
	document.getElementById('app')
);

**use this in components**
class IceCreamGuy extends React.Component {
  get food() {
    return 'ice cream';
  }

  render() {
    return <h1>I like {this.food}.</h1>;//this refers to an instance of IceCreamGuy.
    **explanation**
    Since this will evaluate to an instance of IceCreamGuy, this.food will evaluate to a call of IceCreamGuy's .
    food method. This method will, in turn, evaluate to the string "ice cream."You don't need those parentheses because .food is a getter method.
  }
}

**Event Listeners in Component React**
class MyClass extends React.Component {
  myFunc() {
    alert('Stop it.  Stop hovering.');
  }

  render() {
    return (
      <div onHover={this.myFunc}>
      </div>
    );
  }
}
Recall that an event handler is a function that gets called in response to an event.
 In the above example, the event handler is myFunc()
 Notice that the component class has two methods: .myFunc() and .render(). .myFunc() is being used as an event handler.
  .myFunc() will be called any time that a user hovers over the rendered <div></div>.